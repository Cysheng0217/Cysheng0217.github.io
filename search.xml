<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gitee托管静态博客</title>
    <url>/bb4c45f1.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>系列教程</category>
      </categories>
      <tags>
        <tag>Hexo系列教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客框架入门</title>
    <url>/b08526ec.html</url>
    <content><![CDATA[<center>想不想拥有一个免费、公网可访问的个人博客呢？</center>

<span id="more"></span>
<center>既然你能点进来，那么真相只有一个——</center>
<br/>


<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E7%9C%9F%E7%9B%B8%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA.jpg" alt="真相只有一个"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li><p>搭建一个个人博客，既方便我们统一的记录一些笔记，又能提升一下投简历含金量。</p>
<ul>
<li>鲁迅曰：何乐而不为？[手动狗头]</li>
</ul>
</li>
<li><p>那么我们为啥要使用Hexo来搭建我们的博客呢？</p>
<ul>
<li>Hexo是一款快速、简洁且高效的博客框架（官网抄的，嘿嘿）。</li>
</ul>
</li>
<li><p>我选择Hexo的理由又是什么呢？</p>
<ul>
<li>hexo是一款静态博客框架，生成的静态网页可以通过一些免费的静态网站托管平台（GitHub、Gitee）进行托管，而不必花重金租赁服务器。</li>
<li>支持Markdown语法，hexo会渲染我们写好的Markdown文档，我们只需要考虑如何写文章即可。</li>
<li>方便美化，方便功能扩充。很多地方美化、扩充功能只需要改改配置就可以~</li>
</ul>
</li>
</ul>
<p>好了，让我们开始吧~</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul>
<li>node.js</li>
<li>git</li>
</ul>
<h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h2><h3 id="1-1选择一个存放代码的文件夹"><a href="#1-1选择一个存放代码的文件夹" class="headerlink" title="1.1选择一个存放代码的文件夹"></a>1.1选择一个存放代码的文件夹</h3><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/1.png" alt="1"></p>
<h3 id="1-2打开命令行窗口（输入cmd-按下回车）"><a href="#1-2打开命令行窗口（输入cmd-按下回车）" class="headerlink" title="1.2打开命令行窗口（输入cmd,按下回车）"></a>1.2打开命令行窗口（输入cmd,按下回车）</h3><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/2.png"></p>
<h3 id="1-3安装hexo"><a href="#1-3安装hexo" class="headerlink" title="1.3安装hexo"></a>1.3安装hexo</h3><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/3.png" alt="3"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="2-执行初始化命令"><a href="#2-执行初始化命令" class="headerlink" title="2.执行初始化命令"></a>2.执行初始化命令</h2><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/4.png" alt="4"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>blog是自定义的文件夹名称，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-本地启动"><a href="#3-本地启动" class="headerlink" title="3.本地启动"></a>3.本地启动</h2><h3 id="3-1进入文件夹"><a href="#3-1进入文件夹" class="headerlink" title="3.1进入文件夹"></a>3.1进入文件夹</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>

<h3 id="3-2安装依赖"><a href="#3-2安装依赖" class="headerlink" title="3.2安装依赖"></a>3.2安装依赖</h3><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/8.png" alt="8"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="3-3本地启动"><a href="#3-3本地启动" class="headerlink" title="3.3本地启动"></a>3.3本地启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server 或 hexo s</span><br></pre></td></tr></table></figure>

<p>启动成功：</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/5.png" alt="5"></p>
<h3 id="3-3-浏览器访问"><a href="#3-3-浏览器访问" class="headerlink" title="3.3 浏览器访问"></a>3.3 浏览器访问</h3><p>hexo默认运行在4000端口，所以我们在浏览器地址栏输入：<a href="http://localhost:4000/">http://localhost:4000</a></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/6.png" alt="6"></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>恭喜你，Hexo博客框架你已经成功入门了~~</p>
<blockquote>
<p>参考鸣谢：<a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a></p>
</blockquote>
]]></content>
      <categories>
        <category>系列教程</category>
      </categories>
      <tags>
        <tag>Hexo系列教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<span id="more"></span></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>博客相关</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>友情链接</title>
    <url>/4333.html</url>
    <content><![CDATA[<center>中国有句古话：众人拾柴火焰高。<span id="more"></span><br/>交换个友链呗~~</center>



<p>1.将本小站添加到您博客、个人网站的友链中<br>2.在评论中回复您的博客信息<br>3.贵站的将会被添加到左侧侧边栏友链</p>
<img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/2022-03-13_224108.png" style="zoom: 80%;" />
<div class="note success">
            <p>​    博客信息</p><p>​    名称：我寄愁心与爪哇<br>​    网址：<a href="https://cysheng.gitee.io/">https://cysheng.gitee.io</a><br>​    头像：<a href="https://cysheng.gitee.io/images/avatar.gif">https://cysheng.gitee.io/images/avatar.gif</a><br>​    描述：如果能一步登天，那别人的坚持又算什么呢？</p>
          </div>

]]></content>
      <categories>
        <category>博客相关</category>
      </categories>
      <tags>
        <tag>友链</tag>
      </tags>
  </entry>
  <entry>
    <title>图片</title>
    <url>/9900f79e.html</url>
    <content><![CDATA[<center>个人笔记，仅供参考</center>

<span id="more"></span>
<br/>



<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><p><a href="#20220422">20220422</a></p>
</li>
<li><p><a href="#20220420">20220420</a></p>
</li>
<li><p><a href="#20220419">20220419</a></p>
</li>
<li><p><a href="#20220418">20220418</a></p>
</li>
</ul>
<h1 id="20220422"><a href="#20220422" class="headerlink" title="20220422"></a>20220422</h1><div class="tabs" id="0422"><ul class="nav-tabs"><li class="tab active"><a href="#0422-1">index</a></li><li class="tab"><a href="#0422-2">node</a></li><li class="tab"><a href="#0422-3">php</a></li></ul><div class="tab-content"><div class="tab-pane active" id="0422-1"><p>防止展开太长影响阅读，设置该选项卡。<br>请根据需要点击其他选项卡。</p></div><div class="tab-pane" id="0422-2"><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221014556.png" alt="2022-04-22_094507" style="zoom: 50%;" />



<img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221014603.png" alt="2022-04-22_094635" style="zoom:50%;" />

<img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221014046.png" alt="2022-04-22_094737" style="zoom: 40%;" />



<img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221013536.png" alt="2022-04-22_094836" style="zoom: 33%;" />



<img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221013540.png" alt="2022-04-22_094951" style="zoom: 50%;" /></div><div class="tab-pane" id="0422-3"><p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221515635.png" alt="2022-04-22_134744"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221515160.png" alt="2022-04-22_134824"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221515735.png" alt="2022-04-22_135420"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221514285.png" alt="IMG_20220422_143857"></p>
<p><img src="C:\Users\86191\Desktop\2022-04-22_152842.png" alt="2022-04-22_152842"></p></div></div></div>

<h1 id="20220420"><a href="#20220420" class="headerlink" title="20220420"></a>20220420</h1><div class="tabs" id="0420"><ul class="nav-tabs"><li class="tab active"><a href="#0420-1">主页</a></li><li class="tab"><a href="#0420-2">大数据</a></li></ul><div class="tab-content"><div class="tab-pane active" id="0420-1"><p>防止展开太长影响阅读，设置该选项卡。<br>请根据需要点击其他选项卡。</p></div><div class="tab-pane" id="0420-2"><blockquote>
<p>计算景<img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221511509.png" alt="pandas"><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204221511422.png" alt="无水印">区游客总量-numpy</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.loadtxt()</span></span><br><span class="line"><span class="comment"># 0：读取文件路径</span></span><br><span class="line"><span class="comment"># skiprows：忽略行数</span></span><br><span class="line"><span class="comment"># dtype:读取后转换的类型</span></span><br><span class="line"><span class="comment"># delimiter:指定分隔符</span></span><br><span class="line"><span class="comment"># usecols：指定读取列</span></span><br><span class="line"><span class="comment"># unpack：读取多列设置&quot;True&quot;</span></span><br><span class="line">(jzg_data,zjj_data,xg_data,dbhq_data,dsn_data) = np.loadtxt(<span class="string">&quot;D:\\workspace\\source\\tourist_data.csv&quot;</span>,</span><br><span class="line">          skiprows=<span class="number">1</span>,</span><br><span class="line">          dtype=<span class="string">&quot;int&quot;</span>,</span><br><span class="line">          delimiter=<span class="string">&quot;,&quot;</span>,</span><br><span class="line">          usecols=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),</span><br><span class="line">          unpack=<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="comment"># print(jzg_data)</span></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">jzg_total = jzg_data.<span class="built_in">sum</span>()</span><br><span class="line">zjj_total = zjj_data.<span class="built_in">sum</span>()</span><br><span class="line">xg_total = xg_data.<span class="built_in">sum</span>()</span><br><span class="line">dbhq_total = dbhq_data.<span class="built_in">sum</span>()</span><br><span class="line">dsn_total = dsn_data.<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(numpy)这段时间到九寨沟的游客总量为:&quot;</span>,jzg_total)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(numpy)这段时间到张家界的游客总量为:&quot;</span>,zjj_total)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(numpy)这段时间到香港的游客总量为:&quot;</span>,xg_total)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(numpy)这段时间到东部华侨城的游客总量为:&quot;</span>,dbhq_total)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(numpy)这段时间到上海迪士尼的游客总量为:&quot;</span>,dsn_total)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>计算景区游客总量-pandas</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 0：读取文件路径</span></span><br><span class="line"><span class="comment"># index_col:索引列</span></span><br><span class="line"><span class="comment"># header：标题所在索引</span></span><br><span class="line"><span class="comment"># encoding：存储编码</span></span><br><span class="line">data = pd.read_csv(<span class="string">&quot;D:\\workspace\\source\\tourist_data.csv&quot;</span>,</span><br><span class="line">           index_col=<span class="string">u&quot;日期&quot;</span>,</span><br><span class="line">           header=<span class="number">0</span>,</span><br><span class="line">           encoding=<span class="string">&quot;gb2312&quot;</span>)</span><br><span class="line"><span class="comment"># type()返回数据类型</span></span><br><span class="line"><span class="comment"># print(type(data))# DataFrame</span></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">jzg_total = data[<span class="string">&quot;九寨沟&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line">zjj_total = data[<span class="string">&quot;张家界&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line">xg_total = data[<span class="string">&quot;香港&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line">dbhq_total = data[<span class="string">&quot;东部华侨城&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line">dsn_total = data[<span class="string">&quot;上海迪士尼&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(pandas)这段时间到九寨沟的游客总量为:&quot;</span>,jzg_total)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(pandas)这段时间到张家界的游客总量为:&quot;</span>,zjj_total)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(pandas)这段时间到香港的游客总量为:&quot;</span>,xg_total)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(pandas)这段时间到东部华侨城的游客总量为:&quot;</span>,dbhq_total)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(pandas)这段时间到上海迪士尼的游客总量为:&quot;</span>,dsn_total)</span><br></pre></td></tr></table></figure></div></div></div>


<h1 id="20220419"><a href="#20220419" class="headerlink" title="20220419"></a>20220419</h1><div class="tabs" id="0419"><ul class="nav-tabs"><li class="tab active"><a href="#0419-1">index</a></li><li class="tab"><a href="#0419-2">php</a></li></ul><div class="tab-content"><div class="tab-pane active" id="0419-1"><p>防止展开太长影响阅读，设置该选项卡。<br>请根据需要点击其他选项卡。</p></div><div class="tab-pane" id="0419-2"><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">图书管理系统设计</span><br><span class="line">一、创建数据库和表，存入数据</span><br><span class="line">二、实现PHP页面操作数据库</span><br><span class="line">0.conn.php</span><br><span class="line">1.数据分页</span><br><span class="line">	index.php</span><br><span class="line">2.数据编辑</span><br><span class="line">	update.php,update_ok.php</span><br><span class="line">3.删除</span><br><span class="line">	单行删除 delete.php</span><br><span class="line">	批量删除 delete_lot.php</span><br><span class="line">4.数据添加</span><br><span class="line">	insert.php</span><br><span class="line">三、样式表</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204191739072.png"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204191739533.png" alt="2022-04-19_171922"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204191739862.png" alt="2022-04-19_171949"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204191740767.png" alt="2022-04-19_172714"></p></div></div></div>

<h1 id="20220418"><a href="#20220418" class="headerlink" title="20220418"></a>20220418</h1><div class="tabs" id="0418"><ul class="nav-tabs"><li class="tab active"><a href="#0418-1">index</a></li><li class="tab"><a href="#0418-2">node</a></li><li class="tab"><a href="#0418-3">php</a></li></ul><div class="tab-content"><div class="tab-pane active" id="0418-1"><p>防止展开太长影响阅读，设置该选项卡。<br>请根据需要点击其他选项卡。</p></div><div class="tab-pane" id="0418-2"><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204191110426.png"  />

<img src="https://gitee.com/cysheng/pictures/raw/master/images/202204191110840.png" alt="读xml纯文本写入文件"  /></div><div class="tab-pane" id="0418-3"><p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204191110199.png"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204191110329.png" alt="2022-04-18_090947"></p></div></div></div>
]]></content>
  </entry>
  <entry>
    <title>推荐：B站批量下载工具</title>
    <url>/9f467dd9.html</url>
    <content><![CDATA[<p>【软件名称】B23Downloader<br>【适用系统】Windows<br>【软件介绍】GitHub上的一个开源项目，PC端用于下载B站视频的软件，支持批量下载。<span id="more"></span><br>【特殊说明】<br>1.需要扫码登录，未登录高清视频可能下载不了。（B站本身就有该限制）<br>2.绿色安装，解压后双击启动文件即可。<br>3.下载后文件格式为flv。<br>【项目地址】<a href="https://github.com/vooidzero/B23Downloader">https://github.com/vooidzero/B23Downloader</a></p>
<p>【下载地址】</p>
<ul>
<li>Github：<a href="https://github.com/vooidzero/B23Downloader/releases">https://github.com/vooidzero/B23Downloader/releases</a></li>
<li>阿里云盘：<a href="https://www.aliyundrive.com/s/Cpuj7qJQmjN">https://www.aliyundrive.com/s/Cpuj7qJQmjN</a></li>
</ul>
<p>【测试截图】</p>
<img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/2022-03-30_192118.png" alt="2022-03-30_192118"  />

<img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/2022-03-30_184055.png" alt="2022-03-30_184055"  />

<img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/2022-03-30_191411.png" alt="2022-03-30_191411" style="zoom: 67%;" />]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>B站下载</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒学院-day06</title>
    <url>/e7fb9818.html</url>
    <content><![CDATA[<center>个人笔记，仅供参考</center>
<span id="more"></span>
<br/>

<h1 id="一、头像上传"><a href="#一、头像上传" class="headerlink" title="一、头像上传"></a>一、头像上传</h1><p>（后端待补充）</p>
<h2 id="前端整合"><a href="#前端整合" class="headerlink" title="前端整合"></a>前端整合</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>根据element-ui提供的<strong>用户头像上传</strong>示例代码进行修改。<br>传送门：<a href="https://element.eleme.cn/2.4/#/zh-CN/component/upload">https://element.eleme.cn/2.4/#/zh-CN/component/upload</a></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/guli_1.png" alt="guli_1"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h4 id="el-upload组件"><a href="#el-upload组件" class="headerlink" title="el-upload组件"></a>el-upload组件</h4><ul>
<li>action属性<ul>
<li>文件上传接口</li>
</ul>
</li>
<li>:on-success&#x3D;”handleAvatarSuccess”<ul>
<li>上传成功的钩子</li>
</ul>
</li>
<li>:before-upload&#x3D;”beforeAvatarUpload”<ul>
<li>上传前的钩子</li>
</ul>
</li>
<li>img标签<ul>
<li>用于渲染上传后的图片</li>
</ul>
</li>
<li>i标签<ul>
<li>用于未上传图片时显示默认“+”图标</li>
</ul>
</li>
</ul>
<h4 id="style标签"><a href="#style标签" class="headerlink" title="style标签"></a>style标签</h4><ul>
<li>组件样式</li>
</ul>
<h4 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h4><ul>
<li>实现函数具体功能</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p><strong>上传校验-&gt;上传-&gt;图片地址赋值给teacher.avatar-&gt;重新渲染页面-&gt;img标签展示</strong></p>
</blockquote>
<ul>
<li><p>el-upload组件放到el-form-item中</p>
</li>
<li><p>样式直接粘贴</p>
</li>
<li><p>上传校验</p>
<ul>
<li>根据需求校验文件类型大小：beforeAvatarUpload()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeAvatarUpload(file) &#123;</span><br><span class="line">      const isJPG = file.type === &#x27;image/jpeg&#x27;;</span><br><span class="line">      const isLt2M = file.size / 1024 / 1024 &lt; 2;</span><br><span class="line">  </span><br><span class="line">      if (!isJPG) &#123;</span><br><span class="line">        this.$message.error(&#x27;上传头像图片只能是 JPG 格式!&#x27;);</span><br><span class="line">      &#125;</span><br><span class="line">      if (!isLt2M) &#123;</span><br><span class="line">        this.$message.error(&#x27;上传头像图片大小不能超过 2MB!&#x27;);</span><br><span class="line">      &#125;</span><br><span class="line">      return isJPG &amp;&amp; isLt2M;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">action=<span class="string">&quot;http://localhost:8120/admin/oss/file/upload?module=avatar&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>上传成功</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleAvatarSuccess</span>(<span class="params">response</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">teacher</span>.<span class="property">avatar</span> = response.<span class="property">data</span>.<span class="property">url</span></span><br><span class="line">      <span class="comment">// 强制渲染</span></span><br><span class="line">      <span class="variable language_">this</span>.$forceUpdate()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>img标签展示</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;teacher.avatar&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;teacher.avatar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;!-- 输入表单 --&gt;</span><br><span class="line">    &lt;el-form label-width=&quot;120px&quot;&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师头像&quot;&gt;</span><br><span class="line">        &lt;el-upload</span><br><span class="line">          :show-file-list=&quot;false&quot;</span><br><span class="line">          :on-success=&quot;handleAvatarSuccess&quot;</span><br><span class="line">          :before-upload=&quot;beforeAvatarUpload&quot;</span><br><span class="line">          class=&quot;avatar-uploader&quot;</span><br><span class="line">          action=&quot;http://localhost:8120/admin/oss/file/upload?module=avatar&quot;&gt;</span><br><span class="line">          &lt;img v-if=&quot;imageUrl&quot; :src=&quot;teacher.avatar&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">          &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;/&gt;</span><br><span class="line">        &lt;/el-upload&gt;</span><br><span class="line">		&lt;!-- 省略部分代码 --&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import teacherApi from &#x27;@/api/teacher&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    beforeAvatarUpload(file) &#123;</span><br><span class="line">      const isJPG = file.type === &#x27;image/jpeg&#x27;</span><br><span class="line">      const isLt2M = file.size / 1024 / 1024 &lt; 2</span><br><span class="line"></span><br><span class="line">      if (!isJPG) &#123;</span><br><span class="line">        this.$message.error(&#x27;上传头像图片只能是 JPG 格式!&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">      if (!isLt2M) &#123;</span><br><span class="line">        this.$message.error(&#x27;上传头像图片大小不能超过 2MB!&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">      return isJPG &amp;&amp; isLt2M</span><br><span class="line">    &#125;,</span><br><span class="line">    handleAvatarSuccess(response) &#123;</span><br><span class="line">      this.teacher.avatar = response.data.url</span><br><span class="line">      // 强制渲染</span><br><span class="line">      this.$forceUpdate()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  /* 省略 */</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a>二、异常处理</h1><h2 id="1-自定义异常"><a href="#1-自定义异常" class="headerlink" title="1.自定义异常"></a>1.自定义异常</h2><h3 id="1-1统一异常处理方式"><a href="#1-1统一异常处理方式" class="headerlink" title="1.1统一异常处理方式"></a>1.1统一异常处理方式</h3><ul>
<li>异常处理器分别捕获不同异常，进行处理（规定错误信息）</li>
<li>try-catch捕获不同异常，抛出自定义异常（规定错误信息），由异常处理器进行捕获</li>
</ul>
<h3 id="1-2做法"><a href="#1-2做法" class="headerlink" title="1.2做法"></a>1.2做法</h3><h4 id="1-2-1自定义异常类GuliException"><a href="#1-2-1自定义异常类GuliException" class="headerlink" title="1.2.1自定义异常类GuliException"></a>1.2.1自定义异常类<code>GuliException</code></h4><blockquote>
<p>包：com.atguigu.guli.service.base.exception</p>
</blockquote>
<p>&lt;1&gt;<strong>属性</strong>：根据枚举类<code>ResultCodeEnum</code>规定</p>
<ul>
<li>success：异常处理器处理时规定</li>
<li>message：父类中有定义。</li>
<li>code：为<code>GuliException</code>增加一个属性<ul>
<li><code>private Integer code;</code></li>
</ul>
</li>
</ul>
<p>&lt;2&gt;<strong>构造器</strong>：</p>
<ul>
<li>接收状态码和消息</li>
<li>接收<code>ResultCodeEnum</code></li>
</ul>
<p>&lt;3&gt;<strong>toString方法</strong>：</p>
<p>重写toString()打印时包含消息信息</p>
<ul>
<li>code</li>
<li><strong>message</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.guli.service.base.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.guli.common.base.result.ResultCodeEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuliException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="comment">// 状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收状态码和异常消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GuliException</span><span class="params">(Integer code,String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收返回结果的枚举类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultCodeEnum</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GuliException</span><span class="params">(ResultCodeEnum resultCodeEnum)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.code = resultCodeEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GuliException&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;,message=&quot;</span> + <span class="built_in">super</span>.getMessage() +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-2-2异常处理方法"><a href="#1-2-2异常处理方法" class="headerlink" title="1.2.2异常处理方法"></a>1.2.2异常处理方法</h4><blockquote>
<p>GlobalExceptionHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(GuliException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">error</span><span class="params">(GuliException e)</span>&#123;</span><br><span class="line">    log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">    <span class="keyword">return</span> R.error().message(e.getMessage()).code(e.getCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-2-3打印异常信息"><a href="#1-2-3打印异常信息" class="headerlink" title="1.2.3打印异常信息"></a>1.2.3打印异常信息</h4><p>catch原有异常后打印异常信息，再抛出自定义异常。</p>
<blockquote>
<p>FileController.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;文件上传&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">upload</span><span class="params">( <span class="meta">@ApiParam(value = &quot;文件&quot;, required = true)</span></span></span><br><span class="line"><span class="params">                <span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">                <span class="meta">@ApiParam(value = &quot;模块&quot;, required = true)</span></span></span><br><span class="line"><span class="params">                <span class="meta">@RequestParam(&quot;module&quot;)</span> String <span class="keyword">module</span>)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        url = fileService.upload(is, <span class="keyword">module</span>, originalFilename);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GuliException</span>(ResultCodeEnum.FILE_UPLOAD_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;url&quot;</span>,url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-前端错误处理"><a href="#2-前端错误处理" class="headerlink" title="2.前端错误处理"></a>2.前端错误处理</h2><p>前端上传头像要处理两种错误，一种是http失败，另一种是http成功但业务操作失败。</p>
<ul>
<li>http失败</li>
</ul>
<p>el-upload的on-error钩子函数会在http错误后自动调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-upload :on-error=&quot;handleAvatarError&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleAvatarError</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;Http请求发送失败,请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>业务操作失败</li>
</ul>
<p>判断返回的R对象中success的值。</p>
<p>true表示上传成功，false表示上传失败。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleAvatarSuccess</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">success</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">teacher</span>.<span class="property">avatar</span> = response.<span class="property">data</span>.<span class="property">url</span></span><br><span class="line">        <span class="comment">// 强制渲染</span></span><br><span class="line">        <span class="variable language_">this</span>.$forceUpdate()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件上传失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、批量删除"><a href="#三、批量删除" class="headerlink" title="三、批量删除"></a>三、批量删除</h1><h2 id="1-后端"><a href="#1-后端" class="headerlink" title="1.后端"></a>1.后端</h2><blockquote>
<p>TeacherController.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;根据id列表删除讲师&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;batch/remove&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">batchRemove</span><span class="params">(<span class="meta">@ApiParam(&quot;讲师id列表&quot;)</span> <span class="meta">@RequestBody</span> List&lt;String&gt; idList)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> teacherService.removeByIds(idList);</span><br><span class="line">    <span class="keyword">if</span> (result)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error().message(<span class="string">&quot;数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-前端"><a href="#2-前端" class="headerlink" title="2.前端"></a>2.前端</h2><blockquote>
<p>参考文档：<a href="https://element.eleme.cn/#/zh-CN/component/table">https://element.eleme.cn/#/zh-CN/component/table</a></p>
</blockquote>
<h3 id="2-1思路"><a href="#2-1思路" class="headerlink" title="2.1思路"></a>2.1思路</h3><p>将过程分为两个路线去走：</p>
<ul>
<li><p>实现多选框-&gt;多选框选中-&gt;触发selection-change事件-&gt;将选中的多选框构成的对象数组赋值给全局变量<code>this.multipleSelection</code></p>
</li>
<li><p>实现批量删除按钮-&gt;点击按钮-&gt;调用<code>batchRemove()</code>-&gt;根据<code>this.multipleSelection</code>取出id列表-&gt;根据id列表调用api执行删除</p>
</li>
</ul>
<h3 id="2-2代码"><a href="#2-2代码" class="headerlink" title="2.2代码"></a>2.2代码</h3><h4 id="2-2-1路线一"><a href="#2-2-1路线一" class="headerlink" title="2.2.1路线一"></a>2.2.1路线一</h4><ul>
<li>多选框: 手动添加一个<code>el-table-column</code>，设<code>type</code>属性为<code>selection</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>定义事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span> <span class="attr">border</span> <span class="attr">stripe</span> @<span class="attr">selection-change</span>=<span class="string">&quot;handleSelectionChange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>selection-change:当选择项发生变化时会触发该事件，接收参数为选中的多选框</p>
</blockquote>
<ul>
<li>定义全局变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="attr">multipleSelection</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数体</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleSelectionChange</span>(<span class="params">selection</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">multipleSelection</span> = selection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-1路线二"><a href="#2-2-1路线二" class="headerlink" title="2.2.1路线二"></a>2.2.1路线二</h4><ul>
<li>批量删除按钮</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 10px;&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">&quot;batchRemove&quot;</span>&gt;</span>批量删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>batchRemove()方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line"><span class="title function_">batchRemove</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> idArray = []</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">multipleSelection</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        idArray.<span class="title function_">push</span>(item.<span class="property">id</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确认删除提示框</span></span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;此操作将永久删除这些数据, 是否继续?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 批量删除</span></span><br><span class="line">        <span class="keyword">return</span> teacherApi.<span class="title function_">batchRemove</span>(idArray)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">fetchData</span>()</span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: response.<span class="property">message</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">        <span class="keyword">if</span> (error === <span class="string">&#x27;cancel&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>api</li>
</ul>
<blockquote>
<p>teacher.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">batchRemove</span>(<span class="params">idList</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/admin/edu/teacher/batch/remove&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: idList</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、自动完成-输入建议"><a href="#四、自动完成-输入建议" class="headerlink" title="四、自动完成(输入建议)"></a>四、自动完成(输入建议)</h1><blockquote>
<p>参考文档：<a href="https://element.eleme.cn/#/zh-CN/component/input">https://element.eleme.cn/#/zh-CN/component/input</a></p>
</blockquote>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/guli_2.png"></p>
<h2 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h2><p>每输入一个字符后，在下方列出建议。</p>
<h2 id="2-说明"><a href="#2-说明" class="headerlink" title="2.说明"></a>2.说明</h2><p>el-autocomplete组件是一个可带输入建议的<strong>输入框</strong>组件</p>
<ul>
<li>:fetch-suggestions&#x3D;”querySearch”<ul>
<li>函数引用时传递两个参数queryString, callback<ul>
<li>queryString：输入框中输入的文字</li>
<li>callback：回调函数，输入建议数据准备好时通过 callback(data) 返回到 autocomplete 组件中</li>
</ul>
</li>
</ul>
</li>
<li>value-key<ul>
<li>根据关键字查询出的数据封装到对象数组中，value-key指定选择展示对象中那个属性</li>
<li>value-key&#x3D;”name”</li>
</ul>
</li>
</ul>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><ul>
<li>TeacherController.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据关键字查询讲师名字列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id获取讲师信息&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/get/name-list/&#123;key&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getNameListByKey</span><span class="params">(<span class="meta">@ApiParam(value = &quot;查询字符串&quot;, required = true)</span> <span class="meta">@PathVariable</span> String key)</span>&#123;</span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; nameList = teacherService.getNameListByKey(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;nameList&quot;</span>,nameList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>TeacherService.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getNameListByKey</span><span class="params">(String key)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>TeacherServiceImpl.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getNameListByKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">// 查询条件</span></span><br><span class="line">    QueryWrapper&lt;Teacher&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    queryWrapper.likeRight(<span class="string">&quot;name&quot;</span>,key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> baseMapper.selectMaps(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><ul>
<li>list.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;el-input v-model=&quot;searchObj.name&quot; placeholder=&quot;讲师&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-autocomplete</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;searchObj.name&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:fetch-suggestions</span>=<span class="string">&quot;querySearch&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:trigger-on-focus</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;inline-input&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;讲师&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value-key</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">querySearch</span>(<span class="params">queryString, callback</span>) &#123;</span><br><span class="line">    teacherApi.<span class="title function_">getNameListByKey</span>(queryString).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(response.<span class="property">data</span>.<span class="property">nameList</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>teacher.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getNameListByKey</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`/admin/edu/teacher/get/name-list/<span class="subst">$&#123;key&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>谷粒学院项目笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒学院-day07</title>
    <url>/90fca88e.html</url>
    <content><![CDATA[<center>个人笔记，仅供参考</center>
<span id="more"></span>
<br/>

<ul>
<li>前置：修改依赖版本</li>
</ul>
<blockquote>
<p>父项目guli_parent的pom.xml文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring Cloud--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring Cloud Alibaba--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>微服务基础设施</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/202204152005012.jpg" alt="guli_3"></p>
<h1 id="一、注册中心-Nacos"><a href="#一、注册中心-Nacos" class="headerlink" title="一、注册中心-Nacos"></a>一、注册中心-Nacos</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>1.1下载nacos1.1.4版本:<a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></p>
<ul>
<li><p>linux:<a href="https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.tar.gz">nacos-server-1.1.4.tar.gz</a></p>
</li>
<li><p>windows:<a href="https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.zip">nacos-server-1.1.4.zip</a></p>
</li>
</ul>
<p>1.2解压到guli_parent目录下（随意）</p>
<h2 id="2-运行"><a href="#2-运行" class="headerlink" title="2.运行"></a>2.运行</h2><p>2.1双击执行nacos&#x2F;bin&#x2F;startup.cmd</p>
<p>2.2浏览器访问</p>
<ul>
<li>地址：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></li>
</ul>
<p>2.3登录</p>
<ul>
<li>账号：nacos</li>
<li>密码：nacos</li>
</ul>
<blockquote>
<p>点击服务管理-&gt;服务列表 即可查看已注册服务（暂时没注册，没有数据）</p>
</blockquote>
<h2 id="3-注册"><a href="#3-注册" class="headerlink" title="3.注册"></a>3.注册</h2><p>3.1依赖</p>
<blockquote>
<p>service模块的pom.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos服务注册--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.2配置</p>
<blockquote>
<p>需要进行注册的微服务的application.yml</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure>

<p>3.3主启动</p>
<p>主启动类添加注解：<code>@EnableDiscoveryClient</code></p>
<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><ul>
<li>启动微服务</li>
<li>浏览器查看（服务管理-&gt;服务列表）</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/202204152004225.png" alt="guli_4"></p>
<h1 id="二、服务调用-OpenFeign"><a href="#二、服务调用-OpenFeign" class="headerlink" title="二、服务调用-OpenFeign"></a>二、服务调用-OpenFeign</h1><h2 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h2><blockquote>
<p>消费者端(为了方便直接加入service模块中)：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--OpenFeign服务调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-主启动"><a href="#2-主启动" class="headerlink" title="2.主启动"></a>2.主启动</h2><ul>
<li><p>消费者端主启动类添加**<code>@EnableFeignClients</code>注解**</p>
</li>
<li><p>消费者（edu模块） -调用-&gt; 生产者（oss模块） </p>
<ul>
<li>在edu模块删除讲师的同时，调用oss模块删除讲师头像</li>
</ul>
</li>
</ul>
<h2 id="3-测试（略）"><a href="#3-测试（略）" class="headerlink" title="3.测试（略）"></a>3.测试（略）</h2><blockquote>
<p>附：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;service-oss&quot;)</span></span><br></pre></td></tr></table></figure>



<h1 id="三、负载均衡-Ribbon"><a href="#三、负载均衡-Ribbon" class="headerlink" title="三、负载均衡-Ribbon"></a>三、负载均衡-Ribbon</h1><blockquote>
<p>OpenFeign依赖于Ribbon，Maven在安装OpenFeign时会自动安装Ribbon</p>
</blockquote>
<h2 id="1-负载均衡策略"><a href="#1-负载均衡策略" class="headerlink" title="1.负载均衡策略"></a>1.负载均衡策略</h2><table>
<thead>
<tr>
<th>策略名</th>
<th>策略描述</th>
</tr>
</thead>
<tbody><tr>
<td>BestAvailableRule</td>
<td>选择一个最小的并发请求的server</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>过滤掉那些因为一直连接失败的被标记为circuit tripped的后端server，并过滤掉那些高并发的的后端server（activeconnections 超过配置的阈值）</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>根据响应时间分配一个weight，响应时间越长，weight越小，被选中的可能性越低。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>对选定的负载均衡策略机上重试机制。</td>
</tr>
<tr>
<td>RoundRobinRule</td>
<td>轮询选择server</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个server</td>
</tr>
<tr>
<td>ZoneAvoidanceRule</td>
<td>综合判断server所在区域的性能和server的可用性选择server</td>
</tr>
</tbody></table>
<h2 id="2-更改策略"><a href="#2-更改策略" class="headerlink" title="2.更改策略"></a>2.更改策略</h2><blockquote>
<p>服务消费端配置文件更改配置如下，根据需求更改，这里暂时不变</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">service-oss:</span> <span class="comment"># 调用的提供者的名称 </span></span><br><span class="line">  <span class="attr">ribbon:</span> </span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 策略</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试（略）</p>
<blockquote>
<p>附:IDLE配置多实例方式</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-DServer.port=8121</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/guli_5.png" alt="guli_5"></p>
</li>
</ul>
<h2 id="3-超时控制"><a href="#3-超时控制" class="headerlink" title="3.超时控制"></a>3.超时控制</h2><blockquote>
<p>消费者端（edu微服务）配置：</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment"># 同一实例最大重试次数，不包括首次调用，默认0</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 重试其他实例的最大重试次数，不包括首次所选的server，默认1</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">10000</span> <span class="comment">#连接建立的超时时长，默认1秒</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">10000</span> <span class="comment">#处理请求的超时时间，默认为1秒</span></span><br></pre></td></tr></table></figure>

<p>3.1重试配置</p>
<ul>
<li><p>MaxAutoRetries</p>
<p>同一实例最大重试次数</p>
</li>
<li><p>MaxAutoRetriesNextServer</p>
<p>重试规则：实例A重试次数达到 MaxAutoRetries配置的值 后，会<strong>切换</strong>实例B，然后再达到 MaxAutoRetries配置的值。</p>
<p>MaxAutoRetriesNextServer配置<strong>切换</strong>的次数。</p>
</li>
</ul>
<p>3.2超时配置</p>
<ul>
<li>A微服务调用B微服务，A与B的tcp连接建立时间为：ConnectTimeout</li>
<li>B服务处理请求时间为：ReadTimeout</li>
</ul>
<p>3.3前端超时配置</p>
<blockquote>
<p>src&#x2F;request.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">BASE_API</span>, <span class="comment">// api 的 base_url</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">12000</span> <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="四、删除讲师头像"><a href="#四、删除讲师头像" class="headerlink" title="四、删除讲师头像"></a>四、删除讲师头像</h1><h2 id="1-流程"><a href="#1-流程" class="headerlink" title="1.流程"></a>1.流程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TeacherController.removeById()</span><br><span class="line">-调用-&gt;TeacherService</span><br><span class="line">-实现类-&gt;TeacherServiceImpl.removeAvatarById()(根据id获取讲师，然后从讲师中获取url)</span><br><span class="line">-调用-&gt;Edu模块 OssFileService</span><br><span class="line">-OpenFeign调用-&gt;Oss模块 FileController</span><br><span class="line">-调用-&gt;FileService</span><br><span class="line">-实现类-&gt;FileServiceImpl(根据url删除阿里云图片)</span><br></pre></td></tr></table></figure>

<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><h3 id="2-1-Oss模块"><a href="#2-1-Oss模块" class="headerlink" title="2.1 Oss模块"></a>2.1 Oss模块</h3><ul>
<li><p>FileService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除讲师头像</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url 讲师头像的url地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 删除结果。true成功，false失败。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeFile</span><span class="params">(String url)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>FileServiceImpl.java</p>
</li>
</ul>
<blockquote>
<p>参考：<a href="https://help.aliyun.com/document_detail/84842.htm?spm=a2c4g.11186623.0.0.14c21cd5LdABTL#concept-84842-zh">https://help.aliyun.com/document_detail/84842.htm?spm=a2c4g.11186623.0.0.14c21cd5LdABTL#concept-84842-zh</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除文件或目录。如果要删除目录，目录必须为空。</span></span><br><span class="line">ossClient.deleteObject(bucketName, objectName);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>FileServiceImpl.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeFile</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> ossProperties.getEndpoint();</span><br><span class="line">    <span class="type">String</span> <span class="variable">keyid</span> <span class="operator">=</span> ossProperties.getKeyid();</span><br><span class="line">    <span class="type">String</span> <span class="variable">keysecret</span> <span class="operator">=</span> ossProperties.getKeysecret();</span><br><span class="line">    <span class="type">String</span> <span class="variable">bucketname</span> <span class="operator">=</span> ossProperties.getBucketname();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从url中截取objectName</span></span><br><span class="line">    <span class="comment">// objectName = url - host;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;https://&quot;</span> + bucketname + <span class="string">&quot;.&quot;</span> + endpoint + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> url.substring(host.length());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">    <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, keyid, keysecret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文件或目录。如果要删除目录，目录必须为空。</span></span><br><span class="line">    ossClient.deleteObject(bucketname, objectName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    ossClient.shutdown();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>FileController.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;文件删除&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/remove&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">removeFile</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@ApiParam(value = &quot;文件的url&quot;, required = true)</span></span></span><br><span class="line"><span class="params">    <span class="meta">@RequestBody</span> String url)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileService.removeFile(url);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GuliException</span>(ResultCodeEnum.FILE_DELETE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;url&quot;</span>,url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-Edu模块"><a href="#2-2-Edu模块" class="headerlink" title="2.2 Edu模块"></a>2.2 Edu模块</h3><ul>
<li>TeacherController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id删除讲师</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;根据id删除讲师&quot;,notes = &quot;详细说明：根据id删除讲师,逻辑删除&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/remove/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">removeById</span><span class="params">(<span class="meta">@ApiParam(&quot;讲师id&quot;)</span> <span class="meta">@PathVariable</span> String id)</span>&#123;</span><br><span class="line">    <span class="comment">// 删除讲师头像</span></span><br><span class="line">    teacherService.removeAvatarById(id);</span><br><span class="line">    <span class="comment">// 删除讲师</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> teacherService.removeById(id);</span><br><span class="line">    <span class="keyword">if</span> (result)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error().message(<span class="string">&quot;数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>TeacherService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">R <span class="title function_">removeAvatarById</span><span class="params">(String id)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>TeacherServiceImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OssFileService ossFileService;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">removeAvatarById</span><span class="params">(String id)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取讲师头像url地址</span></span><br><span class="line">    <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> baseMapper.selectById(id);</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatarUrl</span> <span class="operator">=</span> teacher.getAvatar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除讲师头像</span></span><br><span class="line">    <span class="keyword">return</span> ossFileService.removeFile(avatarUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>OssFileService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/admin/oss/file/remove&quot;)</span></span><br><span class="line">R <span class="title function_">removeFile</span><span class="params">(<span class="meta">@RequestBody</span> String url)</span>;</span><br></pre></td></tr></table></figure>

<h1 id="五、服务容错-Sentinel"><a href="#五、服务容错-Sentinel" class="headerlink" title="五、服务容错-Sentinel"></a>五、服务容错-Sentinel</h1><h2 id="1-服务雪崩"><a href="#1-服务雪崩" class="headerlink" title="1.服务雪崩"></a>1.服务雪崩</h2><p>情景描述：</p>
<ul>
<li><p>情景一</p>
<ul>
<li><strong>微服务A</strong> –调用-&gt; <strong>微服务B</strong> –调用-&gt; <strong>微服务C</strong></li>
<li>服务C给服务B响应慢，导致服务B线程阻塞。而服务B线程阻塞，又会导致服务A线程阻塞。</li>
</ul>
</li>
<li><p>情景二</p>
</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204202043934.png"></p>
<p>b2()调用b3()时，若b3()阻塞，会导致b()阻塞。</p>
<p>而b2()阻塞，不但会导致b1()阻塞，还会导致a2()阻塞，进而a1()阻塞。</p>
<h2 id="2-服务容错"><a href="#2-服务容错" class="headerlink" title="2.服务容错"></a>2.服务容错</h2><p>防止服务雪崩，要做好服务容错。</p>
<h3 id="2-1容错方案"><a href="#2-1容错方案" class="headerlink" title="2.1容错方案"></a>2.1容错方案</h3><h4 id="2-1-1隔离"><a href="#2-1-1隔离" class="headerlink" title="2.1.1隔离"></a>2.1.1隔离</h4><ul>
<li>线程池隔离</li>
</ul>
<p>按功能划分不同线程池，当线程池线程满时不扩散到其他线程，不会影响其他功能。</p>
<ul>
<li>信号量隔离</li>
</ul>
<h4 id="2-1-2超时"><a href="#2-1-2超时" class="headerlink" title="2.1.2超时"></a>2.1.2超时</h4><p>服务A调用服务B，当调用超过一定时间未响应，就断开请求，释放线程。</p>
<h4 id="2-1-3限流"><a href="#2-1-3限流" class="headerlink" title="2.1.3限流"></a>2.1.3限流</h4><p>限制系统输入和输出的流量。</p>
<h4 id="2-1-4熔断"><a href="#2-1-4熔断" class="headerlink" title="2.1.4熔断"></a>2.1.4熔断</h4><p>对响应时间慢或异常比例高的下游服务快速失败。</p>
<h4 id="2-1-5降级"><a href="#2-1-5降级" class="headerlink" title="2.1.5降级"></a>2.1.5降级</h4><p>在本服务提供兜底(备用)方案，如果调用下游服务失败，就执行备用方案。</p>
<h2 id="3-Sentinel"><a href="#3-Sentinel" class="headerlink" title="3.Sentinel"></a>3.Sentinel</h2><h3 id="3-1组成"><a href="#3-1组成" class="headerlink" title="3.1组成"></a>3.1组成</h3><p>核心库(Java客户端) + 控制台(Dashboard)</p>
<blockquote>
<p>微服务整合核心库，然后连接控制台。</p>
</blockquote>
<h3 id="3-2控制台"><a href="#3-2控制台" class="headerlink" title="3.2控制台"></a>3.2控制台</h3><h4 id="3-2-1下载"><a href="#3-2-1下载" class="headerlink" title="3.2.1下载"></a>3.2.1下载</h4><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p>
<p>下载版本：sentinel-dashboard-1.7.0.jar</p>
<h4 id="3-2-2启动控制台"><a href="#3-2-2启动控制台" class="headerlink" title="3.2.2启动控制台"></a>3.2.2启动控制台</h4><ul>
<li>方式一(默认参数启动)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.7.0.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二(配置启动参数)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -Dserver.port=8888 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.7.0.jar</span><br></pre></td></tr></table></figure>

<h4 id="3-2-3浏览器访问"><a href="#3-2-3浏览器访问" class="headerlink" title="3.2.3浏览器访问"></a>3.2.3浏览器访问</h4><p>地址：<a href="http://localhost:8080/">http://localhost:8080</a></p>
<p>用户名：sentinel</p>
<p>密码：sentinel</p>
<h3 id="3-3客户端"><a href="#3-3客户端" class="headerlink" title="3.3客户端"></a>3.3客户端</h3><blockquote>
<p><strong>消费者</strong>微服务集成Sentinel客户端</p>
</blockquote>
<h4 id="3-3-1依赖"><a href="#3-3-1依赖" class="headerlink" title="3.3.1依赖"></a>3.3.1依赖</h4><blockquote>
<p>service模块的pom.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务容错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-2配置"><a href="#3-3-2配置" class="headerlink" title="3.3.2配置"></a>3.3.2配置</h4><blockquote>
<p>service_edu模块的application.yml</p>
</blockquote>
<ul>
<li>连接控制台</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring:</span></span><br><span class="line"><span class="comment">#  cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8081</span> <span class="comment"># 指定微服务与控制台交互的端口</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment"># 指定控制台服务的地址</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4核心功能"><a href="#3-4核心功能" class="headerlink" title="3.4核心功能"></a>3.4核心功能</h3><ul>
<li>上游微服务 –<strong>限流</strong>–&gt; 核心微服务 –<strong>熔断降级</strong>–&gt; 下游微服务</li>
</ul>
<p>&lt;1&gt;浏览控制</p>
<p>保证自己不被上游服务压垮</p>
<p>&lt;2&gt;熔断降级</p>
<p>保证自己不被下游服务拖垮</p>
<p>&lt;3&gt;系统负载保护</p>
<p>保证外界环境良好（CPU、内存）</p>
<h3 id="3-5熔断降级"><a href="#3-5熔断降级" class="headerlink" title="3.5熔断降级"></a>3.5熔断降级</h3><blockquote>
<p>OpenFeign整合Sentinel</p>
</blockquote>
<h4 id="3-5-1依赖"><a href="#3-5-1依赖" class="headerlink" title="3.5.1依赖"></a>3.5.1依赖</h4><p>同上</p>
<h4 id="3-5-2配置"><a href="#3-5-2配置" class="headerlink" title="3.5.2配置"></a>3.5.2配置</h4><blockquote>
<p>service_edu模块的application.yml</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-3业务类"><a href="#3-5-3业务类" class="headerlink" title="3.5.3业务类"></a>3.5.3业务类</h4><p>创建容错类（备选方案），指定容错类（OpenFeign远程调用接口添加fallback属性）</p>
<ul>
<li>创建容错类<ul>
<li>添加<code>@Service</code>注解</li>
<li>实现远程调用接口</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.guli.service.edu.feign.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.guli.common.base.result.R;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.guli.service.edu.feign.OssFileService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cysheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-20 20:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssFileServiceFallBack</span> <span class="keyword">implements</span> <span class="title class_">OssFileService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">removeFile</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;熔断保护&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>指定容错类<ul>
<li>fallback &#x3D; OssFileServiceFallBack.class</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;service-oss&quot;,fallback = OssFileServiceFallBack.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OssFileService</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>谷粒学院项目笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒学院-day08</title>
    <url>/43b51f.html</url>
    <content><![CDATA[<center>个人笔记，仅供参考</center>
<span id="more"></span>
<br/>

<h1 id="一、Alibaba-EasyExcel"><a href="#一、Alibaba-EasyExcel" class="headerlink" title="一、Alibaba EasyExcel"></a>一、Alibaba EasyExcel</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><h2 id="1-1应用场景"><a href="#1-1应用场景" class="headerlink" title="1.1应用场景"></a>1.1应用场景</h2><p>数据导入、数据导出、（异构系统、不可信系统之间）数据传输</p>
<h2 id="1-2-官网"><a href="#1-2-官网" class="headerlink" title="1.2 官网"></a>1.2 官网</h2><p>地址：<a href="https://github.com/alibaba/easyexcel">https://github.com/alibaba/easyexcel</a></p>
<p>快速开始(参考代码)：<a href="https://www.yuque.com/easyexcel/doc/easyexcel">https://www.yuque.com/easyexcel/doc/easyexcel</a></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204211029816.png" alt="2"><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204211029412.png" alt="3"><img src="https://gitee.com/cysheng/pictures/raw/master/images/202204211030667.png" alt="1"></p>
<h2 id="1-3最简单的写"><a href="#1-3最简单的写" class="headerlink" title="1.3最简单的写"></a>1.3最简单的写</h2><h3 id="1-3-1新建Maven项目"><a href="#1-3-1新建Maven项目" class="headerlink" title="1.3.1新建Maven项目"></a>1.3.1新建Maven项目</h3><p>项目名：alibaba_easyexcel</p>
<h3 id="1-3-2-依赖"><a href="#1-3-2-依赖" class="headerlink" title="1.3.2 依赖"></a>1.3.2 依赖</h3><ul>
<li><strong>easyexcel</strong></li>
<li><strong>slf4j-simple + xmlbeans</strong><ul>
<li>easyexcel的依赖项，maven不能正确引入，需要手动添加。</li>
</ul>
</li>
<li>lombok<ul>
<li>编写实体类</li>
</ul>
</li>
<li>junit<ul>
<li>测试</li>
</ul>
</li>
</ul>
<blockquote>
<p>pom.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlbeans<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlbeans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-3业务类"><a href="#1-3-3业务类" class="headerlink" title="1.3.3业务类"></a>1.3.3业务类</h3><p>&lt;1&gt;实体类</p>
<ul>
<li><code>@ExcelProperty</code><ul>
<li>value:对应Excel中的字段</li>
<li>index:<ul>
<li>实体类属性对应Excel列的索引，0表示第一列</li>
<li>指定写入列</li>
</ul>
</li>
</ul>
</li>
<li><code>@ExcelIgnore</code>:忽略字段，不会出现在Excel中</li>
<li><code>@DateTimeFormat</code>:日期格式化</li>
<li><code>@NumberFormat</code>:数值格式化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.easyexcel.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelIgnore;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.format.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.format.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cysheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-21 10:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelStudentData</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(&quot;yyyy年MM月dd日 hh时mm分ss秒&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;生日&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NumberFormat(&quot;#.##%&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;薪资&quot;,index = 3)</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&lt;2&gt;测试用例</p>
<ul>
<li>Excel 03版<ul>
<li>后缀名 xls</li>
<li>写入时指定写入03版本：excelType(ExcelTypeEnum.XLS)</li>
<li>标题+数据 不能超过65536行</li>
</ul>
</li>
<li>Excel 07版<ul>
<li>后缀名 xlsx</li>
<li>写入时不指定版本，默认07版本</li>
<li>标题+数据 可以超过65536行</li>
</ul>
</li>
</ul>
<blockquote>
<p>核心代码(具体含义看测试类中代码注释)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyExcel.write(fileName, ExcelStudentData.class)</span><br><span class="line">                <span class="comment">// .excelType(ExcelTypeEnum.XLS)</span></span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(data());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ExcelWriteTest.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.easyexcel.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.support.ExcelTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.easyexcel.entity.ExcelStudentData;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelWriteTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleWrite07</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\.temp\\simpleWrite07.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write(String pathName, Class head)</span></span><br><span class="line">        <span class="comment">// 参数一：指定写的位置及文件名</span></span><br><span class="line">        <span class="comment">// 参数二：指定Excel对应实体类</span></span><br><span class="line">        EasyExcel.write(fileName, ExcelStudentData.class)</span><br><span class="line">                <span class="comment">// sheet(String sheetName)</span></span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                <span class="comment">// doWrite(List data)</span></span><br><span class="line">                <span class="comment">// data:写入的数据</span></span><br><span class="line">                .doWrite(data());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleWrite03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\.temp\\simpleWrite03.xls&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write(String pathName, Class head)</span></span><br><span class="line">        <span class="comment">// pathName：指定写的位置及文件名</span></span><br><span class="line">        <span class="comment">// head：指定Excel对应实体类</span></span><br><span class="line">        EasyExcel.write(fileName, ExcelStudentData.class)</span><br><span class="line">                <span class="comment">// excelType(ExcelTypeEnum excelType)</span></span><br><span class="line">                <span class="comment">// Excel版本：</span></span><br><span class="line">                <span class="comment">//      ExcelTypeEnum.XLS  03版本</span></span><br><span class="line">                <span class="comment">//      ExcelTypeEnum.XLSX 07版本</span></span><br><span class="line">                .excelType(ExcelTypeEnum.XLS)</span><br><span class="line">                <span class="comment">// sheet(String sheetName)</span></span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                <span class="comment">// doWrite(List data)</span></span><br><span class="line">                <span class="comment">// data:写入的数据</span></span><br><span class="line">                .doWrite(data());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回准备写入的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ExcelStudentData&gt; <span class="title function_">data</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ExcelStudentData&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">65535</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">ExcelStudentData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExcelStudentData</span>();</span><br><span class="line"></span><br><span class="line">            data.setName(<span class="string">&quot;Cysheng&quot;</span> + i);</span><br><span class="line">            data.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            data.setSalary(<span class="number">99.9</span>);</span><br><span class="line">            data.setPassword(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            list.add(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-4最简单的读"><a href="#1-4最简单的读" class="headerlink" title="1.4最简单的读"></a>1.4最简单的读</h2><ul>
<li><p>EasyExcel提供一种<strong>回调监听器</strong>，每读取到一行数据都会执行回调监听器的invoke方法。我们可以在invoke方法中对读取每一行进行处理。</p>
</li>
<li><p>回调监听器：AnalysisEventListener&lt;实体类&gt; </p>
<ul>
<li>invoke(ExcelStudentData data, AnalysisContext context) <ul>
<li>方法说明：读取Excel时，每读取一行都会执行，data为一条数据封装的实体类</li>
</ul>
</li>
<li>doAfterAllAnalysed()<ul>
<li>方法说明：读取完成时执行</li>
</ul>
</li>
</ul>
</li>
<li><p>处理（保存数据库）建议</p>
<ul>
<li>invoke()<ul>
<li>将实体类保存在内存中（List）</li>
<li>定义临界值，当达到临界值时，将内存中数据保存到数据库并清空内存</li>
</ul>
</li>
<li>doAfterAllAnalysed()<ul>
<li>将内存中剩余数据存入数据库，清空内存</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>ExcelStudentDataListener.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.easyexcel.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.easyexcel.entity.ExcelStudentData;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cysheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-21 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelStudentDataListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;ExcelStudentData&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BATCH_COUNT</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;ExcelStudentData&gt; studentDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ExcelStudentData&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(ExcelStudentData excelStudentData, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// log.info(&quot;解析到一条数据：&#123;&#125;&quot;,excelStudentData);</span></span><br><span class="line">        </span><br><span class="line">        studentDataList.add(excelStudentData);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (studentDataList.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;存入数据库&quot;</span>);</span><br><span class="line">            <span class="comment">// 清空内存</span></span><br><span class="line">            studentDataList.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;存入数据库&quot;</span>);</span><br><span class="line">        <span class="comment">// 清空内存</span></span><br><span class="line">        studentDataList.clear();</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;所有数据解析完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试用例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.easyexcel.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.support.ExcelTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.easyexcel.entity.ExcelStudentData;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.easyexcel.listener.ExcelStudentDataListener;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cysheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-04-21 16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelReadTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleRead07</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\.temp\\simpleWrite07.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line">        EasyExcel.read(fileName, ExcelStudentData.class,<span class="keyword">new</span> <span class="title class_">ExcelStudentDataListener</span>())</span><br><span class="line">                .sheet()</span><br><span class="line">                .doRead();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleRead03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;D:\\.temp\\simpleWrite03.xls&quot;</span>;</span><br><span class="line"></span><br><span class="line">        EasyExcel.read(fileName, ExcelStudentData.class,<span class="keyword">new</span> <span class="title class_">ExcelStudentDataListener</span>())</span><br><span class="line">                .excelType(ExcelTypeEnum.XLS)</span><br><span class="line">                .sheet()</span><br><span class="line">                .doRead();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="二、课程类名管理"><a href="#二、课程类名管理" class="headerlink" title="二、课程类名管理"></a>二、课程类名管理</h1>]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>谷粒学院项目笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS对象存储</title>
    <url>/35589.html</url>
    <content><![CDATA[<p>针对于项目中的文件（比如用户上传的头像），我们可能会用到文件服务器来进行存储。</p>
<p>如果我们把文件服务器分为两类来看：一种就是自建服务器，如FastDFS；另一种就是使用第三方服务，如我们今天要说的阿里云OSS。<span id="more"></span></p>
<p>简单来讲，</p>
<ul>
<li><p>自建服务器：可以自己维护和定制，免费。但是麻烦。</p>
</li>
<li><p>阿里的OSS服务：虽然说付费。但是省心。而且重要的是性能优越，对于海量数据存储与弹性扩容，阿里还是值得信赖的~~</p>
</li>
</ul>
<blockquote>
<p>小提示：阿里云OSS付费，不过只是学习时测试使用的话，达不到一定量级就不会有费用。</p>
</blockquote>
<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>总体上说，这篇文章要说以下内容：</p>
<ul>
<li><a href="#%E5%87%86%E5%A4%87">准备工作</a>：<ul>
<li>注册账号</li>
<li>登录账号</li>
<li>实名认证</li>
<li>开通OSS服务</li>
</ul>
</li>
<li><a href="#%E4%BD%BF%E7%94%A8">两种使用方式</a>：<ul>
<li>管理控制台中使用</li>
<li>代码中使用</li>
</ul>
</li>
</ul>
<blockquote>
<p>阿里云官网：<a href="https://cn.aliyun.com/">https://cn.aliyun.com/</a></p>
</blockquote>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>​    准备工作比较简单，这里简单说下：</p>
<ul>
<li>注册账号</li>
</ul>
<p>进入<a href="https://cn.aliyun.com/">阿里云官网</a>，点击右上角立即注册。</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%B3%A8%E5%86%8C.png"></p>
<ul>
<li>登录账号</li>
</ul>
<p>点击右上角登录</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E7%99%BB%E5%BD%95.png"></p>
<ul>
<li>实名认证</li>
</ul>
<p>我的账号已经完成实名认证，这里就不再演示。</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E8%AE%A4%E8%AF%81%E5%AE%8C%E6%88%90.png"></p>
<ul>
<li>开通OSS服务（如图）<ol>
<li>点击上方导航栏中“产品”</li>
<li>点击左边栏中“存储”</li>
<li>点击“对象存储OSS”</li>
<li>点击“立即开通”</li>
</ol>
</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/OSS%E5%BC%80%E9%80%9A.png"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/OSS%E5%BC%80%E9%80%9A2.png"></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="1-管理控制台使用"><a href="#1-管理控制台使用" class="headerlink" title="1.管理控制台使用"></a>1.管理控制台使用</h2><p>管理控制台中使用，需要先创建一个Bucket（可以理解为一个文件服务器），然后进行上传即可。</p>
<h3 id="1-1-创建Bucket"><a href="#1-1-创建Bucket" class="headerlink" title="1.1.创建Bucket"></a>1.1.创建Bucket</h3><h4 id="lt-1-gt-点击控制台"><a href="#lt-1-gt-点击控制台" class="headerlink" title="&lt;1&gt;点击控制台"></a>&lt;1&gt;点击控制台</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E8%BF%9B%E5%85%A5%E6%8E%A7%E5%88%B6%E5%8F%B0.png"></p>
<h4 id="lt-2-gt-进入”对象存储OSS“控制台"><a href="#lt-2-gt-进入”对象存储OSS“控制台" class="headerlink" title="&lt;2&gt;进入”对象存储OSS“控制台"></a>&lt;2&gt;进入”对象存储OSS“控制台</h4><p>​    ①方式一：</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%8E%A7%E5%88%B6%E5%8F%B0-OSS-1.png"></p>
<p>​    ②方式二：</p>
<p>​        点击左上角“三”展开侧边栏</p>
<p>​        点击对象存储OSS</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%8E%A7%E5%88%B6%E5%8F%B0-OSS-2.png"></p>
<h4 id="lt-3-gt-创建Bucket"><a href="#lt-3-gt-创建Bucket" class="headerlink" title="&lt;3&gt;创建Bucket"></a>&lt;3&gt;创建Bucket</h4><p>①点击“创建Bucket”</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E5%88%9B%E5%BB%BABucket-1.png"></p>
<p>②根据实际需求填写表单</p>
<p>测试环境下：我们只需要填写<strong>Bucket名称</strong>，读写权限改为<strong>公共读</strong>。</p>
<p>额外功能开通可能产生更多费用，按自身需求填写即可。</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E5%88%9B%E5%BB%BABucket-2.png" alt="创建Bucket-2"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E5%88%9B%E5%BB%BABucket-3.png" alt="创建Bucket-3"></p>
<p>说明：</p>
<ul>
<li>Bucket名称：文件服务器的名称</li>
<li>地域：阿里根据计算得到我们机器使用的最优地域，我们默认即可</li>
<li>存储类型：<ul>
<li>标准存储：高可靠、高可用、高性能，数据经常被访问到</li>
<li>低频访问存储：存储后，访问频率低</li>
<li>归档存储：只存储，基本不访问</li>
<li>冷归档存储：只存储，基本不访问</li>
</ul>
</li>
<li>同城冗余存储：提供机房容灾能力，有额外费用。</li>
<li>版本控制：覆盖和删除的数据会以历史版本存入，有额外费用。</li>
<li>读写权限：<ul>
<li>私有：<ul>
<li>文件读写均需要身份验证</li>
</ul>
</li>
<li>公共读：<ul>
<li>文件写操作需要身份验证</li>
<li>文件读不需要验证</li>
</ul>
</li>
<li>公共读写：<ul>
<li>文件读写均不需要身份验证</li>
</ul>
</li>
</ul>
</li>
<li>服务端加密方式：加密存储，有额外费用。</li>
<li>实时日志查询：对 Bucket 的访问记录进行实时查询分析，有额外费用。</li>
<li>定时备份：云备份服务，有额外费用。</li>
</ul>
<h3 id="1-2-上传文件"><a href="#1-2-上传文件" class="headerlink" title="1.2.上传文件"></a>1.2.上传文件</h3><h4 id="lt-1-gt-进入当前Bucket管理页"><a href="#lt-1-gt-进入当前Bucket管理页" class="headerlink" title="&lt;1&gt;  进入当前Bucket管理页"></a>&lt;1&gt;  进入当前Bucket管理页</h4><p>OSS管理控制台-&gt;Bucket列表-&gt;选择创建好的Bucket-&gt;当前Bucket管理页面</p>
<blockquote>
<p>新创建Bucket时默认会跳转到当前Bucket管理页面</p>
</blockquote>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%89%BE%E5%88%B0Bucket.png" alt="找到Bucket"></p>
<h4 id="lt-2-gt-新建目录"><a href="#lt-2-gt-新建目录" class="headerlink" title="&lt;2&gt;  新建目录"></a>&lt;2&gt;  新建目录</h4><p>我们可以通过新建目录区分上传的不同文件。比如创建一个avatar目录专门用来存放头像。</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%96%B0%E5%BB%BA%E7%9B%AE%E5%BD%95.png" alt="新建目录"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%96%B0%E5%BB%BA%E7%9B%AE%E5%BD%952.png"></p>
<h4 id="lt-3-gt-上传文件"><a href="#lt-3-gt-上传文件" class="headerlink" title="&lt;3&gt;  上传文件"></a>&lt;3&gt;  上传文件</h4><ul>
<li>进入avatar目录</li>
<li>点击上传文件</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.png" alt="上传文件"></p>
<ul>
<li>点击扫描文件&#x2F;扫描文件夹（或直接将文件&#x2F;文件夹拖入“待上传文件”区域）</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E9%80%89%E6%8B%A9%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.png" alt="选择上传文件"></p>
<ul>
<li>点击上传文件进行上传</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E4%B8%8A%E4%BC%A0.png" alt="上传"></p>
<h3 id="1-3-地址栏访问"><a href="#1-3-地址栏访问" class="headerlink" title="1.3.地址栏访问"></a>1.3.地址栏访问</h3><h4 id="lt-1-gt-找到需要访问的文件"><a href="#lt-1-gt-找到需要访问的文件" class="headerlink" title="&lt;1&gt;找到需要访问的文件"></a>&lt;1&gt;找到需要访问的文件</h4><h3 id="lt-2-gt-点击详情"><a href="#lt-2-gt-点击详情" class="headerlink" title="&lt;2&gt;点击详情"></a>&lt;2&gt;点击详情</h3><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%96%87%E4%BB%B6%E8%AF%A6%E6%83%85.png" alt="文件详情"></p>
<h4 id="lt-3-gt-复制图片url"><a href="#lt-3-gt-复制图片url" class="headerlink" title="&lt;3&gt;复制图片url"></a>&lt;3&gt;复制图片url</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E5%A4%8D%E5%88%B6url.png" alt="复制url"></p>
<h4 id="lt-4-gt-粘贴到地址栏-gt-回车"><a href="#lt-4-gt-粘贴到地址栏-gt-回车" class="headerlink" title="&lt;4&gt;粘贴到地址栏-&gt;回车"></a>&lt;4&gt;粘贴到地址栏-&gt;回车</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E7%B2%98%E8%B4%B4%E5%88%B0%E5%9C%B0%E5%9D%80%E6%A0%8F.png" alt="粘贴到地址栏"></p>
<h4 id="lt-5-gt-在浏览器右下角打开下载好的文件"><a href="#lt-5-gt-在浏览器右下角打开下载好的文件" class="headerlink" title="&lt;5&gt;在浏览器右下角打开下载好的文件"></a>&lt;5&gt;在浏览器右下角打开下载好的文件</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%89%93%E5%BC%80%E4%B8%8A%E4%BC%A0%E5%A5%BD%E7%9A%84%E6%96%87%E4%BB%B6.png" alt="打开上传好的文件"></p>
<blockquote>
<p>恭喜你，OSS在控制台中的使用你已经学会了~~</p>
</blockquote>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/51f2a2bb70919664e9a850a575e11011.jpeg" alt="51f2a2bb70919664e9a850a575e11011"></p>
<h2 id="2-代码中使用"><a href="#2-代码中使用" class="headerlink" title="2.代码中使用"></a>2.代码中使用</h2><p>​    我们的阿里云主账号包括了使用阿里云服务的所有权限，如果我们在代码中使用主账号，一旦主账号泄露，会有很大风险。</p>
<p>​    所以，阿里云提供了RAM子账号的功能。新创建的RAM子账号没有任何使用阿里云服务的权限，我们只需要给子账号一个操作OSS服务的权限，这样可以使风险降到最小。</p>
<p>​    <strong>所以，我们下面就创建一个子账号，再授于一个操作OSS权限，然后在代码中使用这个账号操作。</strong></p>
<h3 id="2-1-创建子用户"><a href="#2-1-创建子用户" class="headerlink" title="2.1.创建子用户"></a>2.1.创建子用户</h3><h4 id="lt-1-gt-进入阿里云控制台首页"><a href="#lt-1-gt-进入阿里云控制台首页" class="headerlink" title="&lt;1&gt;进入阿里云控制台首页"></a>&lt;1&gt;进入阿里云控制台首页</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E8%BF%9B%E5%85%A5%E6%8E%A7%E5%88%B6%E5%8F%B0.png"></p>
<h4 id="lt-2-gt-搜索进入“访问控制-控制台”"><a href="#lt-2-gt-搜索进入“访问控制-控制台”" class="headerlink" title="&lt;2&gt;搜索进入“访问控制 控制台”"></a>&lt;2&gt;搜索进入“访问控制 控制台”</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%8E%A7%E5%88%B6%E5%8F%B0.png" alt="访问控制控制台"></p>
<h4 id="lt-3-gt-点击“身份管理”-gt-“用户”-gt-“创建用户”"><a href="#lt-3-gt-点击“身份管理”-gt-“用户”-gt-“创建用户”" class="headerlink" title="&lt;3&gt;点击“身份管理”-&gt;“用户”-&gt;“创建用户”"></a>&lt;3&gt;点击“身份管理”-&gt;“用户”-&gt;“创建用户”</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7.png" alt="创建用户"></p>
<h4 id="lt-4-gt-填写表单并确认"><a href="#lt-4-gt-填写表单并确认" class="headerlink" title="&lt;4&gt;填写表单并确认"></a>&lt;4&gt;填写表单并确认</h4><ul>
<li>注意：因为我们要使用代码访问，一定要勾选Open API调用访问！</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E8%A1%A8%E5%8D%95%E5%A1%AB%E5%86%99.png" alt="创建用户表单填写"></p>
<h4 id="lt-5-gt-保存好AccessKey-ID和AccessKey-Secret"><a href="#lt-5-gt-保存好AccessKey-ID和AccessKey-Secret" class="headerlink" title="&lt;5&gt;保存好AccessKey ID和AccessKey Secret"></a>&lt;5&gt;保存好AccessKey ID和AccessKey Secret</h4><p>这里点击下载CSV文件（包含AccessKey ID和AccessKey Secret的文件），或者点击复制并将其粘贴到安全并且自己方便找到的地方。</p>
<ul>
<li><p>AccessKey ID和AccessKey Secret只会显示一次，一定要保管好！</p>
</li>
<li><p>AccessKey ID：相当于账号</p>
</li>
<li><p>AccessKey Secret：相当于密码</p>
</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E4%BF%9D%E5%AD%98csv%E6%96%87%E4%BB%B6.png" alt="保存csv文件"></p>
<h3 id="2-2-授权"><a href="#2-2-授权" class="headerlink" title="2.2.授权"></a>2.2.授权</h3><h4 id="lt-1-gt-点击“权限管理”-gt-“授权”-gt-“新增授权”"><a href="#lt-1-gt-点击“权限管理”-gt-“授权”-gt-“新增授权”" class="headerlink" title="&lt;1&gt;点击“权限管理”-&gt;“授权”-&gt;“新增授权”"></a>&lt;1&gt;点击“权限管理”-&gt;“授权”-&gt;“新增授权”</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%96%B0%E5%A2%9E%E6%8E%88%E6%9D%83.png" alt="新增授权"></p>
<h4 id="lt-2-gt-赋给账号一个“AliyunOSSFullAccess”权限"><a href="#lt-2-gt-赋给账号一个“AliyunOSSFullAccess”权限" class="headerlink" title="&lt;2&gt;赋给账号一个“AliyunOSSFullAccess”权限"></a>&lt;2&gt;赋给账号一个“AliyunOSSFullAccess”权限</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%8E%88%E6%9D%83%E8%A1%A8%E5%8D%95%E5%A1%AB%E5%86%99.png" alt="授权表单填写"></p>
<h3 id="2-3-操作"><a href="#2-3-操作" class="headerlink" title="2.3.操作"></a>2.3.操作</h3><blockquote>
<p>参考官网SDK示例：<a href="https://help.aliyun.com/document_detail/32006.html">https://help.aliyun.com/document_detail/32006.html</a></p>
</blockquote>
<p>阿里云对象存储OSS提供了如下各大主流语言的SDK。</p>
<p>（点击进入官网提供的对应语言的SDK示例）</p>
<ul>
<li><a href="https://help.aliyun.com/document_detail/32007.html">Java</a></li>
<li><a href="https://help.aliyun.com/document_detail/32098.html">PHP</a></li>
<li><a href="https://help.aliyun.com/document_detail/32067.html">Node.js</a></li>
<li><a href="https://help.aliyun.com/document_detail/32025.html">Python</a></li>
<li><a href="https://help.aliyun.com/document_detail/64040.html">Browser.js</a></li>
<li><a href="https://help.aliyun.com/document_detail/32084.html">.NET</a></li>
<li><a href="https://help.aliyun.com/document_detail/32041.html">Android</a></li>
<li><a href="https://help.aliyun.com/document_detail/32143.html">Go</a></li>
<li><a href="https://help.aliyun.com/document_detail/32054.html">iOS</a></li>
<li><a href="https://help.aliyun.com/document_detail/103184.html">C++</a></li>
<li><a href="https://help.aliyun.com/document_detail/32130.html">C</a></li>
<li><a href="https://help.aliyun.com/document_detail/32113.html">Ruby</a></li>
</ul>
<p>那么这里我们就以Java为例，学习如何操作OSS。SDK中提供了诸多对OSS的操作，包括但不限于对存储空间的操作，上传、下载文件，管理文件，授权访问…</p>
<h4 id="lt-1-gt-创建maven项目"><a href="#lt-1-gt-创建maven项目" class="headerlink" title="&lt;1&gt;创建maven项目"></a>&lt;1&gt;创建maven项目</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE.png" alt="创建maven项目"></p>
<h4 id="lt-2-gt-pom中引入依赖"><a href="#lt-2-gt-pom中引入依赖" class="headerlink" title="&lt;2&gt;pom中引入依赖"></a>&lt;2&gt;pom中引入依赖</h4><ul>
<li>aliyun-sdk-oss：用于操作OSS</li>
<li>Junit：用于编写单元测试</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-3-gt-新建测试类并指定包"><a href="#lt-3-gt-新建测试类并指定包" class="headerlink" title="&lt;3&gt;新建测试类并指定包"></a>&lt;3&gt;新建测试类并指定包</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%96%B0%E5%BB%BA%E6%B5%8B%E8%AF%95%E7%B1%BB.png" alt="新建测试类"></p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E6%B5%8B%E8%AF%95%E7%B1%BB.png" alt="测试类"></p>
<h4 id="lt-4-gt-新建测试方法"><a href="#lt-4-gt-新建测试方法" class="headerlink" title="&lt;4&gt;新建测试方法"></a>&lt;4&gt;新建测试方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cysheng.oss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cysheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-30 15:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OSSTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUploadFile</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="lt-5-gt-代码（以上传文件为例）"><a href="#lt-5-gt-代码（以上传文件为例）" class="headerlink" title="&lt;5&gt;代码（以上传文件为例）"></a>&lt;5&gt;代码（以上传文件为例）</h4><p><strong>思路：阿里把对OSS的操作封装到了OSS类中，比如我们想上传文件，首先要创建OSS实例，然后调用它的putObject()方法进行上传。</strong></p>
<blockquote>
<p>我们在编写某一操作时，去官网中复制对应代码进行修改即可。</p>
<p>地址：<a href="https://help.aliyun.com/document_detail/84781.html">https://help.aliyun.com/document_detail/84781.html</a></p>
</blockquote>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E7%AE%80%E5%8D%95%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81.png" alt="简单上传代码"></p>
<h4 id="lt-5-gt-使用文件流"><a href="#lt-5-gt-使用文件流" class="headerlink" title="&lt;5&gt;使用文件流"></a>&lt;5&gt;使用文件流</h4><p>阿里云提供多种上传方式，这里我们以上传文件流作为演示，复制main方法中代码。</p>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%B5%81.png" alt="上传文件流"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-hangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line">        <span class="comment">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;yourAccessKeyId&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;yourAccessKeySecret&quot;</span>;</span><br><span class="line">        <span class="comment">// 填写Bucket名称，例如examplebucket。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;examplebucket&quot;</span>;</span><br><span class="line">        <span class="comment">// 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;exampledir/exampleobject.txt&quot;</span>;</span><br><span class="line">        <span class="comment">// 填写本地文件的完整路径，例如D:\\localpath\\examplefile.txt。</span></span><br><span class="line">        <span class="comment">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件流。</span></span><br><span class="line">        String filePath= <span class="string">&quot;D:\\localpath\\examplefile.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);            </span><br><span class="line">            <span class="comment">// 创建PutObject请求。</span></span><br><span class="line">            ossClient.putObject(bucketName, objectName, inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                    + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：其中OSSException为com.aliyun.oss.OSSException;</p>
</blockquote>
<h4 id="lt-6-gt-调整代码"><a href="#lt-6-gt-调整代码" class="headerlink" title="&lt;6&gt;调整代码"></a>&lt;6&gt;调整代码</h4><ul>
<li>将方法中局部变量提取到成员变量（如果需要做其他测试，提取之后方便进行测试，如不进行其他测试，可省略该步骤）</li>
<li>将异常抛出</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81.png" alt="修改代码"></p>
<ul>
<li><p>修改变量值</p>
<ul>
<li>endpoint：如图。</li>
<li>accessKeyId：创建子账号时生成的AccessKey ID。</li>
<li>accessKeySecret：创建子账号时生成的AccessKey Secret。</li>
<li>objectName：在文件服务器中的 目录名&#x2F;文件名</li>
<li>filePath：指定上传文件路径</li>
</ul>
<p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E4%BF%AE%E6%94%B9%E5%8F%98%E9%87%8F%E5%80%BC.png" alt="修改变量值"></p>
</li>
</ul>
<h4 id="lt-7-gt-运行单元测试方法"><a href="#lt-7-gt-运行单元测试方法" class="headerlink" title="&lt;7&gt;运行单元测试方法"></a>&lt;7&gt;运行单元测试方法</h4><h4 id="lt-8-gt-查看"><a href="#lt-8-gt-查看" class="headerlink" title="&lt;8&gt;查看"></a>&lt;8&gt;查看</h4><p><img src="https://gitee.com/cysheng/pictures/raw/master/2022/images/%E7%BB%93%E6%9E%9C.png" alt="结果"></p>
<h4 id="lt-9-gt-URL访问规则"><a href="#lt-9-gt-URL访问规则" class="headerlink" title="&lt;9&gt;URL访问规则"></a>&lt;9&gt;URL访问规则</h4><p>我们在项目中使用时，通常会将用户上传的文件提交到文件服务器，然后将文件访问的url地址存放到数据库中。</p>
<p>规则：<a href="https://bucket的名称.endpoint/%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%96%87%E4%BB%B6%E5%90%8D%E3%80%82">https://bucket的名称.endpoint/文件夹/文件名。</a></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>好了，本篇就说这么多，拜~</p>
]]></content>
      <categories>
        <category>第三方接口</category>
      </categories>
      <tags>
        <tag>阿里云OSS</tag>
      </tags>
  </entry>
</search>
